#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("dashboard:server");
var http = require("http");
var MongoClient = require("mongodb").MongoClient;

/**
 * Get port from environment and store in Express.
 */

// Connection URL
const dataBaseUrl = "mongodb://publisher:readandwrite@qareport-shard-00-00-bwtot.mongodb.net:27017,qareport-shard-00-01-bwtot.mongodb.net:27017,qareport-shard-00-02-bwtot.mongodb.net:27017/qareport?ssl=true&replicaSet=qareport-shard-0&authSource=admin";

MongoClient.connect(dataBaseUrl, { useNewUrlParser: true }, function(err, db) {
    if (err) {
        console.log("Unable to connect to MongoDB Server. Please check DB Server status.");
        console.error(err);
        process.exit(1);
    }
    console.log("Successfully connected to MongoDB server");
    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || "3000");
    app.set("port", port);
    app.set("dbConnection", db);
    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === "string" ?
            "pipe " + addr :
            "port " + addr.port;
        debug("Listening on " + bind);
    }

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);
        if (isNaN(port)) {
            // named pipe
            return val;
        }
        if (port >= 0) {
            // port number
            return port;
        }
        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== "listen") {
            throw error;
        }
        var bind = typeof port === "string" ?
            "Pipe " + port :
            "Port " + port;
        // handle specific listen errors with friendly messages
        switch (error.code) {
            case "EACCES":
                console.error(bind + " requires elevated privileges");
                process.exit(1);
                break;
            case "EADDRINUSE":
                console.error(bind + " is already in use");
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
});